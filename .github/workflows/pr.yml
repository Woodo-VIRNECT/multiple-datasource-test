name: Pull request

on:
  pull_request:
    branches:
      - master
      - main
  workflow_dispatch:

jobs:
  build:
    name: Test and Analyze
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
      checks: write
    env:
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs='-Xmx2g -XX:MaxMetaspaceSize=512m' -Dorg.gradle.parallel=true"
    strategy:
      matrix:
        java: [ '17' ]
    
    steps:
      - name: CHECKOUT
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name : Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{matrix.java}}
          distribution: 'corretto'
          cache: gradle

      - name: Set executable permission for Gradle Wrapper
        run: chmod +x ./gradlew
        working-directory: ./

      - name: Validate Gradle Wrapper version
        run: ./gradlew --version
        working-directory: ./

      - name: Create code coverage folder if not exists
        run: |
          mkdir -p .qodana/code-coverage
        working-directory: ./

      - name: Set executable permission for Gradle Wrapper
        run: chmod +x gradlew
        working-directory: ./

      - name : Run tests and Jacoco
        run: |
          ./gradlew test jacocoTestReport
        working-directory: ./

      - name: Archive coverage data
        uses: actions/upload-artifact@v4
        with:
          name: gradle-coverage-data-jacoco
          path: .qodana/code-coverage
    
  qodana:
    need: build
    runs-on: ubuntu-22.04
    steps:
      - name: CHECKOUT
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Qodana Scan'
        uses: JetBrains/qodana-action@v2024.1
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
        with:
          pr-mode: false
          cache-dir: .qodana/cache
          results-dir: .qodana/results
