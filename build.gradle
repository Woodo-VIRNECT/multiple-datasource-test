import org.springframework.core.env.Environment

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'jacoco'
    id "org.sonarqube" version "5.0.0.4638"
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // mysql
    runtimeOnly 'mysql:mysql-connector-java:8.0.28'

    // oracle jdbc
    implementation group: 'com.oracle.ojdbc', name: 'ojdbc8', version: '19.3.0.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'

    // auditing
    implementation 'org.hibernate:hibernate-envers:6.2.4.Final'

}

test {
    useJUnitPlatform {
        filter {
//            excludeTags ['integration']
            excludeTags 'integration'
        }
    }
    finalizedBy 'jacocoTestReport'
}

jacoco{
    toolVersion = "0.8.12"
    setReportsDirectory(file("${rootDir}/.qodana/code-coverage"))
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = true

//        원하는 경로에 저장하고 싶을 경우 아래와 같이 설정
//        html.destination file("src/jacoco/jacoco.html")
//        xml.destination file("src/jacoco/jacoco.xml")
//        csv.destination file("src/jacoco/jacoco.csv")
    }

    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/*Application*",
                            "**/*Config*",
                            "**/*Dto*",
                            "**/*Request*",
                            "**/*Response*",
                            "**/*Interceptor*",
                            "**/*Exception*"
                    ] + Qdomains)
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') {
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            element = 'CLASS'
            enabled = true


            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }

            excludes = [
                    "**.*Application*",
                    "**.*Config*",
                    "**.*Dto*",
                    "**.*Request*",
                    "**.*Response*",
                    "**.*Interceptor*",
                    "**.*Exception*"
            ] + Qdomains
        }
    }
}

sonar {
    properties {
        property "sonar.projectKey", "Woodo-VIRNECT_multiple-datasource-test"
        property "sonar.organization", "woodo-virnect"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
        property "sonar.junit.reportPaths", "build/test-results/test"
    }
}